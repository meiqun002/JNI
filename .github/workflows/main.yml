name: Build JNIDemo on ARM64

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  build:
    runs-on: ubuntu-22.04  # 使用 Ubuntu 22.04 作为基础镜像

    steps:
    - name: Checkout source
      uses: actions/checkout@v3

    - name: Set up QEMU
      uses: docker/setup-qemu-action@v2
      with:
        platforms: arm64

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2

    - name: Install dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y cmake gcc-aarch64-linux-gnu g++-aarch64-linux-gnu openjdk-17-jdk

    # - name: Configure and Build with CMake
    #   run: |
    #     mkdir -p build
    #     cd build
    #     cmake -DCMAKE_SYSTEM_NAME=Linux \
    #           -DCMAKE_SYSTEM_PROCESSOR=aarch64 \
    #           -DCMAKE_C_COMPILER=aarch64-linux-gnu-gcc \
    #           -DCMAKE_CXX_COMPILER=aarch64-linux-gnu-g++ \
    #           -DJAVA_AWT_LIBRARY=/usr/lib/jvm/java-17-openjdk-arm64 \
    #           ..
    #     make
    - name: Configure CMake for cross-compilation
      run: cmake -S . -B build -DCMAKE_SYSTEM_NAME=Linux -DCMAKE_SYSTEM_PROCESSOR=aarch64 -DCMAKE_C_COMPILER=aarch64-linux-gnu-gcc -DCMAKE_CXX_COMPILER=aarch64-linux-gnu-g++

    - name: Build JNI library
      run: cmake --build build

    - name: Compile Java code
      run: javac JNIDemo.java

    - name: Run Java application with QEMU
      run: |
        export QEMU_LD_PREFIX=/usr/aarch64-linux-gnu
        qemu-aarch64 -L /usr/aarch64-linux-gnu java -Djava.library.path=build JNIDemo

    - name: Verify Output
      run: |
        ls -la build
